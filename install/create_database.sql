CREATE TABLE TASKS (
		ID INTEGER NOT NULL,
		NAME VARCHAR(255) NOT NULL,
		CATEGORY_ID INTEGER,
		PROJECT_ID INTEGER,
		STATUS_ID INTEGER
	);

CREATE TABLE EGGS (
		ID INTEGER NOT NULL,
		INTERRUPTIONINSIDE INTEGER NOT NULL,
		INTERRUPTIONOUTSIDE INTEGER NOT NULL,
		STARTTIME TIMESTAMP,
		TASK_ID INTEGER
	);

CREATE TABLE STATUSES (
		ID INTEGER NOT NULL,
		NAME VARCHAR(255)
	);

CREATE TABLE PROJECTS (
		ID INTEGER NOT NULL,
		NAME VARCHAR(255) NOT NULL
	);

CREATE TABLE CATEGORIES (
		ID INTEGER NOT NULL,
		NAME VARCHAR(255) NOT NULL
	);

CREATE TABLE GENERATORS (
		SEQUENCE_NAME VARCHAR(255),
		SEQUENCE_NEXT_HI_VALUE INTEGER
	);

CREATE UNIQUE INDEX IDX_PK_TASKS_ID ON TASKS (ID ASC);
CREATE UNIQUE INDEX IDX_UQ_TASKS_NAME ON TASKS (NAME ASC);
CREATE INDEX IDX_TASKS_PROJECT_ID ON TASKS (PROJECT_ID ASC);
CREATE INDEX IDX_TASKS_STATUS_ID ON TASKS (STATUS_ID ASC);
CREATE INDEX IDX_TASKS_CATEGORY_ID ON TASKS (CATEGORY_ID ASC);

CREATE UNIQUE INDEX IDX_PK_STATUSES_ID ON STATUSES (ID ASC);

CREATE UNIQUE INDEX IDX_PK_CATEGORIES_ID ON CATEGORIES (ID ASC);
CREATE UNIQUE INDEX IDX_UQ_CATEGORIES_NAME ON CATEGORIES (NAME ASC);

CREATE UNIQUE INDEX IDX_PK_PROJECTS_ID ON PROJECTS (ID ASC);
CREATE UNIQUE INDEX IDX_UQ_PROJECTS_NAME ON PROJECTS (NAME ASC);

CREATE UNIQUE INDEX IDX_PK_EGGS_ID ON EGGS (ID ASC);
CREATE INDEX IDX_EGGS_TASK_ID ON EGGS (TASK_ID ASC);

ALTER TABLE STATUSES ADD CONSTRAINT PK_STATUS_ID PRIMARY KEY (ID);
ALTER TABLE TASKS ADD CONSTRAINT PK_TASK_ID PRIMARY KEY (ID);
ALTER TABLE EGGS ADD CONSTRAINT PK_EGG_ID PRIMARY KEY (ID);
ALTER TABLE CATEGORIES ADD CONSTRAINT PK_CATEGORY_ID PRIMARY KEY (ID);
ALTER TABLE PROJECTS ADD CONSTRAINT PK_PROJECT_ID PRIMARY KEY (ID);

ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_PROJECT_ID FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECTS (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_STATUS_ID FOREIGN KEY (STATUS_ID)
	REFERENCES STATUSES (ID);
ALTER TABLE TASKS ADD CONSTRAINT FK_TASKS_CATEGORY_ID FOREIGN KEY (CATEGORY_ID)
	REFERENCES CATEGORIES (ID);
ALTER TABLE EGGS ADD CONSTRAINT FK_EGGS_TASK_ID FOREIGN KEY (TASK_ID)
	REFERENCES TASKS (ID);